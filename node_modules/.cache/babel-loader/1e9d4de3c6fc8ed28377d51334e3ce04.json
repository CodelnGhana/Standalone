{"remainingRequest":"/home/suuk/dev_portfolio/codeln/chat_app_standalone/node_modules/babel-loader/lib/index.js!/home/suuk/dev_portfolio/codeln/chat_app_standalone/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/suuk/dev_portfolio/codeln/chat_app_standalone/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/suuk/dev_portfolio/codeln/chat_app_standalone/src/components/Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/suuk/dev_portfolio/codeln/chat_app_standalone/src/components/Chat.vue","mtime":1559046826069},{"path":"/home/suuk/dev_portfolio/codeln/chat_app_standalone/node_modules/cache-loader/dist/cjs.js","mtime":1558094956032},{"path":"/home/suuk/dev_portfolio/codeln/chat_app_standalone/node_modules/babel-loader/lib/index.js","mtime":1558094938972},{"path":"/home/suuk/dev_portfolio/codeln/chat_app_standalone/node_modules/cache-loader/dist/cjs.js","mtime":1558094956032},{"path":"/home/suuk/dev_portfolio/codeln/chat_app_standalone/node_modules/vue-loader/lib/index.js","mtime":1558094957178}],"contextDependencies":[],"result":["import _toConsumableArray from \"/home/suuk/dev_portfolio/codeln/chat_app_standalone/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'Chat',\n  props: {\n    msg: String\n  },\n  data: function data() {\n    return {\n      participants: [{\n        id: 'other_user',\n        name: 'Dennis',\n        imageUrl: 'https://avatars3.githubusercontent.com/u/1915989?s=230&v=4'\n      }],\n      // the list of all the participant of the conversation. `name` is the user name, `id` is used to establish the author of a message, `imageUrl` is supposed to be the user avatar.\n      titleImageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png',\n      messageList: [{\n        type: 'text',\n        author: \"me\",\n        data: {\n          text: \"Hi Dennis!\"\n        }\n      }, {\n        type: 'text',\n        author: \"other_user\",\n        data: {\n          text: \"Hello Phil., what's up?\"\n        }\n      }],\n      // the list of the messages to show, can be paginated and adjusted dynamically\n      newMessagesCount: 0,\n      isChatOpen: false,\n      // to determine whether the chat window should be open or closed\n      showTypingIndicator: '',\n      // when set to a value matching the participant.id it shows the typing indicator for the specific user\n      colors: {\n        header: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        launcher: {\n          bg: '#4e8cff'\n        },\n        messageList: {\n          bg: '#ffffff'\n        },\n        sentMessage: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        receivedMessage: {\n          bg: '#eaeaea',\n          text: '#222222'\n        },\n        userInput: {\n          bg: '#f4f7f9',\n          text: '#565867'\n        }\n      },\n      // specifies the color scheme for the component\n      alwaysScrollToBottom: false,\n      // when set to true always scrolls the chat to the bottom when new events are in (new message, user starts typing...)\n      messageStyling: true // enables *bold* /emph/ _underline_ and such (more info at github.com/mattezza/msgdown)\n\n    };\n  },\n  methods: {\n    sendMessage: function sendMessage(text) {\n      if (text.length > 0) {\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1;\n        this.onMessageWasSent({\n          author: 'support',\n          type: 'text',\n          data: {\n            text: text\n          }\n        });\n      }\n    },\n    onMessageWasSent: function onMessageWasSent(message) {\n      // called when the user sends a message\n      this.messageList = [].concat(_toConsumableArray(this.messageList), [message]);\n    },\n    openChat: function openChat() {\n      // called when the user clicks on the fab button to open the chat\n      this.isChatOpen = true;\n      this.newMessagesCount = 0;\n    },\n    closeChat: function closeChat() {\n      // called when the user clicks on the botton to close the chat\n      this.isChatOpen = false;\n    },\n    handleScrollToTop: function handleScrollToTop() {// called when the user scrolls message list to top\n      // leverage pagination for loading another page of messages\n    },\n    handleOnType: function handleOnType() {\n      console.log('Emit typing event');\n    }\n  }\n};",{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AADA,GAFA;AAKA,EAAA,IALA,kBAKA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,CACA;AACA,QAAA,EAAA,EAAA,YADA;AAEA,QAAA,IAAA,EAAA,QAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OADA,CADA;AAOA;AACA,MAAA,aAAA,EAAA,iEARA;AASA,MAAA,WAAA,EAAA,CACA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,MAAA,MAAA;AAAA,QAAA,IAAA,EAAA;AAAA,UAAA,IAAA;AAAA;AAAA,OADA,EAEA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,MAAA,cAAA;AAAA,QAAA,IAAA,EAAA;AAAA,UAAA,IAAA;AAAA;AAAA,OAFA,CATA;AAYA;AACA,MAAA,gBAAA,EAAA,CAbA;AAcA,MAAA,UAAA,EAAA,KAdA;AAcA;AACA,MAAA,mBAAA,EAAA,EAfA;AAeA;AACA,MAAA,MAAA,EAAA;AACA,QAAA,MAAA,EAAA;AACA,UAAA,EAAA,EAAA,SADA;AAEA,UAAA,IAAA,EAAA;AAFA,SADA;AAKA,QAAA,QAAA,EAAA;AACA,UAAA,EAAA,EAAA;AADA,SALA;AAQA,QAAA,WAAA,EAAA;AACA,UAAA,EAAA,EAAA;AADA,SARA;AAWA,QAAA,WAAA,EAAA;AACA,UAAA,EAAA,EAAA,SADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAXA;AAeA,QAAA,eAAA,EAAA;AACA,UAAA,EAAA,EAAA,SADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAfA;AAmBA,QAAA,SAAA,EAAA;AACA,UAAA,EAAA,EAAA,SADA;AAEA,UAAA,IAAA,EAAA;AAFA;AAnBA,OAhBA;AAuCA;AACA,MAAA,oBAAA,EAAA,KAxCA;AAwCA;AACA,MAAA,cAAA,EAAA,IAzCA,CAyCA;;AAzCA,KAAA;AA2CA,GAjDA;AAkDA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,IADA,EACA;AACA,UAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,gBAAA,GAAA,KAAA,UAAA,GAAA,KAAA,gBAAA,GAAA,KAAA,gBAAA,GAAA,CAAA;AACA,aAAA,gBAAA,CAAA;AAAA,UAAA,MAAA,EAAA,SAAA;AAAA,UAAA,IAAA,EAAA,MAAA;AAAA,UAAA,IAAA,EAAA;AAAA,YAAA,IAAA,EAAA;AAAA;AAAA,SAAA;AACA;AACA,KANA;AAOA,IAAA,gBAPA,4BAOA,OAPA,EAOA;AACA;AACA,WAAA,WAAA,gCAAA,KAAA,WAAA,IAAA,OAAA;AACA,KAVA;AAWA,IAAA,QAXA,sBAWA;AACA;AACA,WAAA,UAAA,GAAA,IAAA;AACA,WAAA,gBAAA,GAAA,CAAA;AACA,KAfA;AAgBA,IAAA,SAhBA,uBAgBA;AACA;AACA,WAAA,UAAA,GAAA,KAAA;AACA,KAnBA;AAoBA,IAAA,iBApBA,+BAoBA,CACA;AACA;AACA,KAvBA;AAwBA,IAAA,YAxBA,0BAwBA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,mBAAA;AACA;AA1BA;AAlDA,CAAA","sourcesContent":["<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n\n    <beautiful-chat\n      :participants=\"participants\"\n      :titleImageUrl=\"titleImageUrl\"\n      :onMessageWasSent=\"onMessageWasSent\"\n      :messageList=\"messageList\"\n      :newMessagesCount=\"newMessagesCount\"\n      :isOpen=\"isChatOpen\"\n      :close=\"closeChat\"\n      :open=\"openChat\"\n      :showEmoji=\"true\"\n      :showFile=\"true\"\n      :showTypingIndicator=\"showTypingIndicator\"\n      :colors=\"colors\"\n      :alwaysScrollToBottom=\"alwaysScrollToBottom\"\n      :messageStyling=\"messageStyling\"\n      @onType=\"handleOnType\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Chat',\n  props: {\n    msg: String\n  },\n  data () {\n    return {\n      participants: [\n        {\n          id: 'other_user',\n          name: 'Dennis',\n          imageUrl: 'https://avatars3.githubusercontent.com/u/1915989?s=230&v=4'\n        }\n      ], // the list of all the participant of the conversation. `name` is the user name, `id` is used to establish the author of a message, `imageUrl` is supposed to be the user avatar.\n      titleImageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png',\n      messageList: [\n        { type: 'text', author: `me`, data: { text: `Hi Dennis!` } },\n        { type: 'text', author: `other_user`, data: { text: `Hello Phil., what's up?` } }\n      ], // the list of the messages to show, can be paginated and adjusted dynamically\n      newMessagesCount: 0,\n      isChatOpen: false, // to determine whether the chat window should be open or closed\n      showTypingIndicator: '', // when set to a value matching the participant.id it shows the typing indicator for the specific user\n      colors: {\n        header: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        launcher: {\n          bg: '#4e8cff'\n        },\n        messageList: {\n          bg: '#ffffff'\n        },\n        sentMessage: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        receivedMessage: {\n          bg: '#eaeaea',\n          text: '#222222'\n        },\n        userInput: {\n          bg: '#f4f7f9',\n          text: '#565867'\n        }\n      }, // specifies the color scheme for the component\n      alwaysScrollToBottom: false, // when set to true always scrolls the chat to the bottom when new events are in (new message, user starts typing...)\n      messageStyling: true // enables *bold* /emph/ _underline_ and such (more info at github.com/mattezza/msgdown)\n    }\n  },\n  methods: {\n    sendMessage (text) {\n      if (text.length > 0) {\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1\n        this.onMessageWasSent({ author: 'support', type: 'text', data: { text } })\n      }\n    },\n    onMessageWasSent (message) {\n      // called when the user sends a message\n      this.messageList = [...this.messageList, message]\n    },\n    openChat () {\n      // called when the user clicks on the fab button to open the chat\n      this.isChatOpen = true\n      this.newMessagesCount = 0\n    },\n    closeChat () {\n      // called when the user clicks on the botton to close the chat\n      this.isChatOpen = false\n    },\n    handleScrollToTop () {\n      // called when the user scrolls message list to top\n      // leverage pagination for loading another page of messages\n    },\n    handleOnType () {\n      console.log('Emit typing event')\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"],"sourceRoot":"src/components"}]}